
mux_0_100.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000f6  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000155  00000000  00000000  000001af  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000df  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000190  00000000  00000000  000003e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d9  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000040  00000000  00000000  0000066d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  000006ad  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ef       	ldi	r30, 0xF6	; 246
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 36       	cpi	r26, 0x6A	; 106
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	4b c0       	rjmp	.+150    	; 0xf2 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__heap_end>

0000005e <main>:
#include<avr/io.h>
#include<util/delay.h>
void main()
{
  5e:	ef 92       	push	r14
  60:	ff 92       	push	r15
  62:	0f 93       	push	r16
  64:	1f 93       	push	r17
  66:	df 93       	push	r29
  68:	cf 93       	push	r28
  6a:	cd b7       	in	r28, 0x3d	; 61
  6c:	de b7       	in	r29, 0x3e	; 62
  6e:	2a 97       	sbiw	r28, 0x0a	; 10
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	f8 94       	cli
  74:	de bf       	out	0x3e, r29	; 62
  76:	0f be       	out	0x3f, r0	; 63
  78:	cd bf       	out	0x3d, r28	; 61
DDRB=0XFF;
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	87 bb       	out	0x17, r24	; 23
DDRD=0XFF;
  7e:	81 bb       	out	0x11, r24	; 17
unsigned char a[10]={0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D , 0x7D, 0x07, 0x7F, 0x6F};
  80:	de 01       	movw	r26, r28
  82:	11 96       	adiw	r26, 0x01	; 1
  84:	e0 e6       	ldi	r30, 0x60	; 96
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	8a e0       	ldi	r24, 0x0A	; 10
  8a:	01 90       	ld	r0, Z+
  8c:	0d 92       	st	X+, r0
  8e:	81 50       	subi	r24, 0x01	; 1
  90:	e1 f7       	brne	.-8      	; 0x8a <main+0x2c>
  92:	ae 01       	movw	r20, r28
  94:	4f 5f       	subi	r20, 0xFF	; 255
  96:	5f 4f       	sbci	r21, 0xFF	; 255
  98:	da 01       	movw	r26, r20
int i,j;
//while(1)
//{
for(i=0;i<10;i++)
{
PORTB=0X01;
  9a:	ee 24       	eor	r14, r14
  9c:	e3 94       	inc	r14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	08 ea       	ldi	r16, 0xA8	; 168
  a0:	11 e6       	ldi	r17, 0x61	; 97
PORTD=a[i];
_delay_ms(100);

PORTB=0x02;
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	f8 2e       	mov	r15, r24
  a6:	64 ec       	ldi	r22, 0xC4	; 196
  a8:	79 e0       	ldi	r23, 0x09	; 9
#include<avr/io.h>
#include<util/delay.h>
void main()
{
  aa:	9e 01       	movw	r18, r28
  ac:	25 5f       	subi	r18, 0xF5	; 245
  ae:	3f 4f       	sbci	r19, 0xFF	; 255
int i,j;
//while(1)
//{
for(i=0;i<10;i++)
{
PORTB=0X01;
  b0:	e8 ba       	out	0x18, r14	; 24
PORTD=a[i];
  b2:	8c 91       	ld	r24, X
  b4:	82 bb       	out	0x12, r24	; 18
  b6:	c8 01       	movw	r24, r16
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x5a>
_delay_ms(100);

PORTB=0x02;
  bc:	f8 ba       	out	0x18, r15	; 24
  be:	fa 01       	movw	r30, r20
for(j=0;j<10;j++)
{
PORTD=a[j];
  c0:	81 91       	ld	r24, Z+
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	cb 01       	movw	r24, r22
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <main+0x68>
PORTB=0X01;
PORTD=a[i];
_delay_ms(100);

PORTB=0x02;
for(j=0;j<10;j++)
  ca:	2e 17       	cp	r18, r30
  cc:	3f 07       	cpc	r19, r31
  ce:	c1 f7       	brne	.-16     	; 0xc0 <main+0x62>
  d0:	11 96       	adiw	r26, 0x01	; 1
DDRD=0XFF;
unsigned char a[10]={0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D , 0x7D, 0x07, 0x7F, 0x6F};
int i,j;
//while(1)
//{
for(i=0;i<10;i++)
  d2:	2a 17       	cp	r18, r26
  d4:	3b 07       	cpc	r19, r27
  d6:	61 f7       	brne	.-40     	; 0xb0 <main+0x52>
{
PORTD=a[j];
_delay_ms(10);
}
}
}
  d8:	2a 96       	adiw	r28, 0x0a	; 10
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	f8 94       	cli
  de:	de bf       	out	0x3e, r29	; 62
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	cd bf       	out	0x3d, r28	; 61
  e4:	cf 91       	pop	r28
  e6:	df 91       	pop	r29
  e8:	1f 91       	pop	r17
  ea:	0f 91       	pop	r16
  ec:	ff 90       	pop	r15
  ee:	ef 90       	pop	r14
  f0:	08 95       	ret

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
