
usart_lcd_vt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000036  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000195  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000dd  00000000  00000000  000002ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000020c  00000000  00000000  000003ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ed  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000003e  00000000  00000000  00000715  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	28 d0       	rcall	.+80     	; 0x84 <main>
  34:	3a c0       	rjmp	.+116    	; 0xaa <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <ldata>:
lcmd(0x0e);
lcmd(0x80);
}
void ldata(unsigned char x)
{
data=x;									//define data PORT for data input -----------
  38:	88 bb       	out	0x18, r24	; 24
									//rsrwen for rs rw en pin connected to the which port  
rsrwen|=(1<<rs);			//set rs 			define ------------->rs pin no. 
  3a:	a8 9a       	sbi	0x15, 0	; 21
rsrwen&=~(1<<rw);			//clear rw 			define ------------->rw pin no.				
  3c:	a9 98       	cbi	0x15, 1	; 21
rsrwen|=(1<<en);			//set en			define ------------->en pin no.
  3e:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  40:	84 ef       	ldi	r24, 0xF4	; 244
  42:	91 e0       	ldi	r25, 0x01	; 1
  44:	01 97       	sbiw	r24, 0x01	; 1
  46:	f1 f7       	brne	.-4      	; 0x44 <__SREG__+0x5>
_delay_ms(2);
rsrwen&=~(1<<en);			//EN CLEAR RS MUST BE SET
  48:	aa 98       	cbi	0x15, 2	; 21
}
  4a:	08 95       	ret

0000004c <lcmd>:

void lcmd(unsigned char x)
{
data=x;									//define data PORT for data input d0,d1,d2....d7
  4c:	88 bb       	out	0x18, r24	; 24
									//rsrwen for rs rw en pin connected to the which port  
rsrwen&=~(1<<rs); 			//CLEAR rs 			define ------------->rs pin no. 
  4e:	a8 98       	cbi	0x15, 0	; 21
rsrwen&=~(1<<rw);			//clear rw 			define ------------->rw pin no.				
  50:	a9 98       	cbi	0x15, 1	; 21
rsrwen|=(1<<en);			//set en			define ------------->en pin no.
  52:	aa 9a       	sbi	0x15, 2	; 21
  54:	84 ef       	ldi	r24, 0xF4	; 244
  56:	91 e0       	ldi	r25, 0x01	; 1
  58:	01 97       	sbiw	r24, 0x01	; 1
  5a:	f1 f7       	brne	.-4      	; 0x58 <lcmd+0xc>
_delay_ms(2);
rsrwen&=~((1<<rs)|(1<<rw)|(1<<en));
  5c:	85 b3       	in	r24, 0x15	; 21
  5e:	88 7f       	andi	r24, 0xF8	; 248
  60:	85 bb       	out	0x15, r24	; 21
}
  62:	08 95       	ret

00000064 <lcd>:



void lcd()
{
lcmd(0x38);
  64:	88 e3       	ldi	r24, 0x38	; 56
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	f1 df       	rcall	.-30     	; 0x4c <lcmd>
lcmd(0x06);
  6a:	86 e0       	ldi	r24, 0x06	; 6
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	ee df       	rcall	.-36     	; 0x4c <lcmd>
lcmd(0x01);
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	eb df       	rcall	.-42     	; 0x4c <lcmd>
lcmd(0x0e);
  76:	8e e0       	ldi	r24, 0x0E	; 14
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	e8 df       	rcall	.-48     	; 0x4c <lcmd>
lcmd(0x80);
  7c:	80 e8       	ldi	r24, 0x80	; 128
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	e5 df       	rcall	.-54     	; 0x4c <lcmd>
}
  82:	08 95       	ret

00000084 <main>:
/*void lcmd(unsigned char);
void lstr(unsigned char*);
void li2s(long int);*/
void lcd();
void main()
{
  84:	1f 93       	push	r17
DDRC=0xff;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	84 bb       	out	0x14, r24	; 20
DDRB=0xff;
  8a:	87 bb       	out	0x17, r24	; 23
lcd();
  8c:	eb df       	rcall	.-42     	; 0x64 <lcd>
ldata('k');
  8e:	8b e6       	ldi	r24, 0x6B	; 107
  90:	d3 df       	rcall	.-90     	; 0x38 <ldata>
UCSRB=(1<<RXEN);
  92:	80 e1       	ldi	r24, 0x10	; 16
  94:	8a b9       	out	0x0a, r24	; 10
UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  96:	86 e8       	ldi	r24, 0x86	; 134
  98:	80 bd       	out	0x20, r24	; 32
UBRRL=51;//9600 BAUD RATE
  9a:	83 e3       	ldi	r24, 0x33	; 51
  9c:	89 b9       	out	0x09, r24	; 9
while(1)
{
while(UCSRA&(1<<RXC)==0);
UCSRA=(1<<TXC);
  9e:	10 e4       	ldi	r17, 0x40	; 64
UCSRB=(1<<RXEN);
UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
UBRRL=51;//9600 BAUD RATE
while(1)
{
while(UCSRA&(1<<RXC)==0);
  a0:	8b b1       	in	r24, 0x0b	; 11
UCSRA=(1<<TXC);
  a2:	1b b9       	out	0x0b, r17	; 11
ldata(UDR);
  a4:	8c b1       	in	r24, 0x0c	; 12
  a6:	c8 df       	rcall	.-112    	; 0x38 <ldata>
  a8:	fb cf       	rjmp	.-10     	; 0xa0 <main+0x1c>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
