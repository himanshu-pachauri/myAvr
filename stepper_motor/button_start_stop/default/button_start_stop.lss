
button_start_stop.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001a3  00000000  00000000  00000109  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000dc  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000194  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000fa  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000070  00000000  00000000  00000636  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000006a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	20 c0       	rjmp	.+64     	; 0x76 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<avr/io.h>
#include<util/delay.h>
void main()
{int i=0;
DDRC=0X0F;
  38:	8f e0       	ldi	r24, 0x0F	; 15
  3a:	84 bb       	out	0x14, r24	; 20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  3c:	20 e5       	ldi	r18, 0x50	; 80
  3e:	33 ec       	ldi	r19, 0xC3	; 195
while(1)
{
if(PINC&0x10)
  40:	9c 9b       	sbis	0x13, 4	; 19
  42:	15 c0       	rjmp	.+42     	; 0x6e <__SREG__+0x2f>
{
PORTC|=0x01;
  44:	a8 9a       	sbi	0x15, 0	; 21
PORTC&=0xf7;
  46:	ab 98       	cbi	0x15, 3	; 21
  48:	c9 01       	movw	r24, r18
  4a:	01 97       	sbiw	r24, 0x01	; 1
  4c:	f1 f7       	brne	.-4      	; 0x4a <__SREG__+0xb>
_delay_ms(200);

PORTC|=0x02;
  4e:	a9 9a       	sbi	0x15, 1	; 21
PORTC&=0xfe;
  50:	a8 98       	cbi	0x15, 0	; 21
  52:	c9 01       	movw	r24, r18
  54:	01 97       	sbiw	r24, 0x01	; 1
  56:	f1 f7       	brne	.-4      	; 0x54 <__SREG__+0x15>
_delay_ms(200);


PORTC|=0x04;
  58:	aa 9a       	sbi	0x15, 2	; 21
PORTC&=0xfd;
  5a:	a9 98       	cbi	0x15, 1	; 21
  5c:	c9 01       	movw	r24, r18
  5e:	01 97       	sbiw	r24, 0x01	; 1
  60:	f1 f7       	brne	.-4      	; 0x5e <__SREG__+0x1f>
_delay_ms(200);


PORTC|=0x08;
  62:	ab 9a       	sbi	0x15, 3	; 21
PORTC&=0xfb;
  64:	aa 98       	cbi	0x15, 2	; 21
  66:	c9 01       	movw	r24, r18
  68:	01 97       	sbiw	r24, 0x01	; 1
  6a:	f1 f7       	brne	.-4      	; 0x68 <__SREG__+0x29>
  6c:	e9 cf       	rjmp	.-46     	; 0x40 <__SREG__+0x1>
_delay_ms(200);

}
else
{
PORTC&=0XF0;
  6e:	85 b3       	in	r24, 0x15	; 21
  70:	80 7f       	andi	r24, 0xF0	; 240
  72:	85 bb       	out	0x15, r24	; 21
  74:	e5 cf       	rjmp	.-54     	; 0x40 <__SREG__+0x1>

00000076 <_exit>:
  76:	f8 94       	cli

00000078 <__stop_program>:
  78:	ff cf       	rjmp	.-2      	; 0x78 <__stop_program>
