
stepper_motor_with_two_state_of_switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000286  00000000  00000000  0000014d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000de  00000000  00000000  000003d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000023d  00000000  00000000  000004b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000124  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000f0  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	42 c0       	rjmp	.+132    	; 0xba <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<avr/io.h>
#include<util/delay.h>
void main()
{int i=0;
DDRC=0X0F;
  38:	8f e0       	ldi	r24, 0x0F	; 15
  3a:	84 bb       	out	0x14, r24	; 20
  3c:	40 e0       	ldi	r20, 0x00	; 0
  3e:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  40:	20 e5       	ldi	r18, 0x50	; 80
  42:	33 ec       	ldi	r19, 0xC3	; 195
while(1)
{
										if(PINC&0X10)
  44:	9c 9b       	sbis	0x13, 4	; 19
  46:	0a c0       	rjmp	.+20     	; 0x5c <__SREG__+0x1d>
										{	i++;
  48:	4f 5f       	subi	r20, 0xFF	; 255
  4a:	5f 4f       	sbci	r21, 0xFF	; 255
										while(PINC&0X10);
  4c:	9c 99       	sbic	0x13, 4	; 19
  4e:	fe cf       	rjmp	.-4      	; 0x4c <__SREG__+0xd>
										if(i==3)
  50:	43 30       	cpi	r20, 0x03	; 3
  52:	51 05       	cpc	r21, r1
  54:	19 f4       	brne	.+6      	; 0x5c <__SREG__+0x1d>
  56:	41 e0       	ldi	r20, 0x01	; 1
  58:	50 e0       	ldi	r21, 0x00	; 0
  5a:	03 c0       	rjmp	.+6      	; 0x62 <__SREG__+0x23>
										i=1;
										}

										}

if(i==1)
  5c:	41 30       	cpi	r20, 0x01	; 1
  5e:	51 05       	cpc	r21, r1
  60:	a1 f4       	brne	.+40     	; 0x8a <__SREG__+0x4b>
{
PORTC|=0x01;
  62:	a8 9a       	sbi	0x15, 0	; 21
PORTC&=0xf7;
  64:	ab 98       	cbi	0x15, 3	; 21
  66:	c9 01       	movw	r24, r18
  68:	01 97       	sbiw	r24, 0x01	; 1
  6a:	f1 f7       	brne	.-4      	; 0x68 <__SREG__+0x29>
_delay_ms(200);

PORTC|=0x02;
  6c:	a9 9a       	sbi	0x15, 1	; 21
PORTC&=0xfe;
  6e:	a8 98       	cbi	0x15, 0	; 21
  70:	c9 01       	movw	r24, r18
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <__SREG__+0x33>
_delay_ms(200);


PORTC|=0x04;
  76:	aa 9a       	sbi	0x15, 2	; 21
PORTC&=0xfd;
  78:	a9 98       	cbi	0x15, 1	; 21
  7a:	c9 01       	movw	r24, r18
  7c:	01 97       	sbiw	r24, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <__SREG__+0x3d>
_delay_ms(200);


PORTC|=0x08;
  80:	ab 9a       	sbi	0x15, 3	; 21
PORTC&=0xfb;
  82:	aa 98       	cbi	0x15, 2	; 21
  84:	c9 01       	movw	r24, r18
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <__SREG__+0x47>
_delay_ms(200);

}

if(i==2)
  8a:	42 30       	cpi	r20, 0x02	; 2
  8c:	51 05       	cpc	r21, r1
  8e:	d1 f6       	brne	.-76     	; 0x44 <__SREG__+0x5>
{

PORTC|=0x08;
  90:	ab 9a       	sbi	0x15, 3	; 21
PORTC&=0xfb;
  92:	aa 98       	cbi	0x15, 2	; 21
  94:	c9 01       	movw	r24, r18
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <__SREG__+0x57>
_delay_ms(200);

PORTC|=0x04;
  9a:	aa 9a       	sbi	0x15, 2	; 21
PORTC&=0xfd;
  9c:	a9 98       	cbi	0x15, 1	; 21
  9e:	c9 01       	movw	r24, r18
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <__SREG__+0x61>
_delay_ms(200);

PORTC|=0x02;
  a4:	a9 9a       	sbi	0x15, 1	; 21
PORTC&=0xfe;
  a6:	a8 98       	cbi	0x15, 0	; 21
  a8:	c9 01       	movw	r24, r18
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <__SREG__+0x6b>
_delay_ms(200);

PORTC|=0x01;
  ae:	a8 9a       	sbi	0x15, 0	; 21
PORTC&=0xf7;
  b0:	ab 98       	cbi	0x15, 3	; 21
  b2:	c9 01       	movw	r24, r18
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <__SREG__+0x75>
  b8:	c5 cf       	rjmp	.-118    	; 0x44 <__SREG__+0x5>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
