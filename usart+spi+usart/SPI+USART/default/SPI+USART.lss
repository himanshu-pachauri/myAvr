
SPI+USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000000a6  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000024  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000a7  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000079  00000000  00000000  00000219  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000112  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ae  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000028  00000000  00000000  00000482  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ea       	ldi	r30, 0xA6	; 166
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	0e d0       	rcall	.+28     	; 0x66 <main>
  4a:	2b c0       	rjmp	.+86     	; 0xa2 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <lstr>:

}

}
void lstr(unsigned char *p)
{
  4e:	fc 01       	movw	r30, r24
while(*p!=0)
{
UDR=*p;
while((UCSRA&(1<<TXC))==0);
UCSRA=0x40;
  50:	90 e4       	ldi	r25, 0x40	; 64
  52:	05 c0       	rjmp	.+10     	; 0x5e <lstr+0x10>
}
void lstr(unsigned char *p)
{
while(*p!=0)
{
UDR=*p;
  54:	8c b9       	out	0x0c, r24	; 12
while((UCSRA&(1<<TXC))==0);
  56:	5e 9b       	sbis	0x0b, 6	; 11
  58:	fe cf       	rjmp	.-4      	; 0x56 <lstr+0x8>
UCSRA=0x40;
  5a:	9b b9       	out	0x0b, r25	; 11
p++;
  5c:	31 96       	adiw	r30, 0x01	; 1
}

}
void lstr(unsigned char *p)
{
while(*p!=0)
  5e:	80 81       	ld	r24, Z
  60:	88 23       	and	r24, r24
  62:	c1 f7       	brne	.-16     	; 0x54 <lstr+0x6>
UCSRA=0x40;
p++;

}

}
  64:	08 95       	ret

00000066 <main>:
#include<avr/io.h>
#include<util/delay.h>
void lstr(unsigned char*);
void main()
{int x;
UCSRB=(1<<TXEN)|(0<<UCSZ2)|(1<<RXEN);//RX&TX ENABLE
  66:	88 e1       	ldi	r24, 0x18	; 24
  68:	8a b9       	out	0x0a, r24	; 10
UCSRC=(1<<URSEL)|(3<<UCSZ0);
  6a:	86 e8       	ldi	r24, 0x86	; 134
  6c:	80 bd       	out	0x20, r24	; 32
UBRRH=0X00;
  6e:	10 bc       	out	0x20, r1	; 32
UBRRL=51;
  70:	83 e3       	ldi	r24, 0x33	; 51
  72:	89 b9       	out	0x09, r24	; 9
lstr("SPI + USART//SLAVE");///USART OKK TRANSMITER
  74:	80 e6       	ldi	r24, 0x60	; 96
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	ea df       	rcall	.-44     	; 0x4e <lstr>
lstr(10);
  7a:	8a e0       	ldi	r24, 0x0A	; 10
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	e7 df       	rcall	.-50     	; 0x4e <lstr>
lstr("SPI + USART//SLAVE");
  80:	80 e6       	ldi	r24, 0x60	; 96
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	e4 df       	rcall	.-56     	; 0x4e <lstr>
//spi+slave
DDRB=(0<<DDB2)|(0<<DDB3)|(1<<DDB4)|(0<<DDB5);
  86:	80 e1       	ldi	r24, 0x10	; 16
  88:	87 bb       	out	0x17, r24	; 23
SPCR=(1<<SPE)|(1<<DORD)|(1<<CPHA);
  8a:	84 e6       	ldi	r24, 0x64	; 100
  8c:	8d b9       	out	0x0d, r24	; 13
{
while((SPSR&(1<<SPIF))==0);
SPSR|=(1<<SPIF);
UDR=SPDR;
while((UCSRA&(1<<TXC))==0);
UCSRA=0x40;
  8e:	90 e4       	ldi	r25, 0x40	; 64
//spi+slave
DDRB=(0<<DDB2)|(0<<DDB3)|(1<<DDB4)|(0<<DDB5);
SPCR=(1<<SPE)|(1<<DORD)|(1<<CPHA);
while(1)
{
while((SPSR&(1<<SPIF))==0);
  90:	77 9b       	sbis	0x0e, 7	; 14
  92:	fe cf       	rjmp	.-4      	; 0x90 <main+0x2a>
SPSR|=(1<<SPIF);
  94:	77 9a       	sbi	0x0e, 7	; 14
UDR=SPDR;
  96:	8f b1       	in	r24, 0x0f	; 15
  98:	8c b9       	out	0x0c, r24	; 12
while((UCSRA&(1<<TXC))==0);
  9a:	5e 9b       	sbis	0x0b, 6	; 11
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x34>
UCSRA=0x40;
  9e:	9b b9       	out	0x0b, r25	; 11
  a0:	f7 cf       	rjmp	.-18     	; 0x90 <main+0x2a>

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
