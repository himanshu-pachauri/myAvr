
2_7SEG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000d0  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000012a  00000000  00000000  00000189  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000d0  00000000  00000000  000002b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000014f  00000000  00000000  00000383  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  000004d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d3  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000028  00000000  00000000  000005c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000005ef  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ed       	ldi	r30, 0xD0	; 208
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 36       	cpi	r26, 0x6A	; 106
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	38 c0       	rjmp	.+112    	; 0xcc <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
#include<avr/io.h>
#include<util/delay.h>
void main()
{
  5e:	df 93       	push	r29
  60:	cf 93       	push	r28
  62:	cd b7       	in	r28, 0x3d	; 61
  64:	de b7       	in	r29, 0x3e	; 62
  66:	2a 97       	sbiw	r28, 0x0a	; 10
  68:	0f b6       	in	r0, 0x3f	; 63
  6a:	f8 94       	cli
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	0f be       	out	0x3f, r0	; 63
  70:	cd bf       	out	0x3d, r28	; 61
DDRD=0XFF;
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	81 bb       	out	0x11, r24	; 17
DDRB=0XFF;
  76:	87 bb       	out	0x17, r24	; 23
unsigned char a[10]={0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D , 0x7D, 0x07, 0x7F, 0x6F};
  78:	de 01       	movw	r26, r28
  7a:	11 96       	adiw	r26, 0x01	; 1
  7c:	e0 e6       	ldi	r30, 0x60	; 96
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	8a e0       	ldi	r24, 0x0A	; 10
  82:	01 90       	ld	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	81 50       	subi	r24, 0x01	; 1
  88:	e1 f7       	brne	.-8      	; 0x82 <main+0x24>
  8a:	ae 01       	movw	r20, r28
  8c:	4f 5f       	subi	r20, 0xFF	; 255
  8e:	5f 4f       	sbci	r21, 0xFF	; 255
  90:	da 01       	movw	r26, r20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  92:	68 ea       	ldi	r22, 0xA8	; 168
  94:	71 e6       	ldi	r23, 0x61	; 97
#include<avr/io.h>
#include<util/delay.h>
void main()
{
  96:	9e 01       	movw	r18, r28
  98:	25 5f       	subi	r18, 0xF5	; 245
  9a:	3f 4f       	sbci	r19, 0xFF	; 255
int i,j;
//while(1)
{
for(j=0;j<10;j++)
{
PORTB=a[j];
  9c:	8c 91       	ld	r24, X
  9e:	88 bb       	out	0x18, r24	; 24
  a0:	fa 01       	movw	r30, r20
for(i=0;i<10;i++)
{
PORTD=a[i];
  a2:	81 91       	ld	r24, Z+
  a4:	82 bb       	out	0x12, r24	; 18
  a6:	cb 01       	movw	r24, r22
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <main+0x4a>
//while(1)
{
for(j=0;j<10;j++)
{
PORTB=a[j];
for(i=0;i<10;i++)
  ac:	2e 17       	cp	r18, r30
  ae:	3f 07       	cpc	r19, r31
  b0:	c1 f7       	brne	.-16     	; 0xa2 <main+0x44>
  b2:	11 96       	adiw	r26, 0x01	; 1
DDRB=0XFF;
unsigned char a[10]={0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D , 0x7D, 0x07, 0x7F, 0x6F};
int i,j;
//while(1)
{
for(j=0;j<10;j++)
  b4:	2a 17       	cp	r18, r26
  b6:	3b 07       	cpc	r19, r27
  b8:	89 f7       	brne	.-30     	; 0x9c <main+0x3e>

_delay_ms(100);
}
}
}
}
  ba:	2a 96       	adiw	r28, 0x0a	; 10
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	f8 94       	cli
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	cd bf       	out	0x3d, r28	; 61
  c6:	cf 91       	pop	r28
  c8:	df 91       	pop	r29
  ca:	08 95       	ret

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
