
timer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000066  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000026  00000000  00000000  000000da  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000084  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000003d  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000b5  00000000  00000000  000001c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000094  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	0e d0       	rcall	.+28     	; 0x50 <main>
  34:	16 c0       	rjmp	.+44     	; 0x62 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <timer1>:
#include<avr/io.h>
void timer1()
{
TCCR1B=0X03;
  38:	83 e0       	ldi	r24, 0x03	; 3
  3a:	8e bd       	out	0x2e, r24	; 46
TCNT1H=0Xc2;
  3c:	82 ec       	ldi	r24, 0xC2	; 194
  3e:	8d bd       	out	0x2d, r24	; 45
TCNT1L=0Xf6;
  40:	86 ef       	ldi	r24, 0xF6	; 246
  42:	8c bd       	out	0x2c, r24	; 44
while((TIFR&0x04)==0x00);
  44:	08 b6       	in	r0, 0x38	; 56
  46:	02 fe       	sbrs	r0, 2
  48:	fd cf       	rjmp	.-6      	; 0x44 <__SREG__+0x5>
TIFR=0x04;
  4a:	84 e0       	ldi	r24, 0x04	; 4
  4c:	88 bf       	out	0x38, r24	; 56


}
  4e:	08 95       	ret

00000050 <main>:
void main()
{
  50:	1f 93       	push	r17

DDRD=0XFF;
  52:	8f ef       	ldi	r24, 0xFF	; 255
  54:	81 bb       	out	0x11, r24	; 17
while(1)
{
PORTD=0xff;
  56:	1f ef       	ldi	r17, 0xFF	; 255
  58:	12 bb       	out	0x12, r17	; 18
timer1();
  5a:	ee df       	rcall	.-36     	; 0x38 <timer1>
PORTD=0x00;
  5c:	12 ba       	out	0x12, r1	; 18
timer1();
  5e:	ec df       	rcall	.-40     	; 0x38 <timer1>
  60:	fb cf       	rjmp	.-10     	; 0x58 <main+0x8>

00000062 <_exit>:
  62:	f8 94       	cli

00000064 <__stop_program>:
  64:	ff cf       	rjmp	.-2      	; 0x64 <__stop_program>
