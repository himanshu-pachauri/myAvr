
interrupt_ledblinking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002a  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001fb  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fd  00000000  00000000  00000361  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001e3  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f9  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000e0  00000000  00000000  0000076d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000084d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1a c0       	rjmp	.+52     	; 0x38 <__vector_1>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	2d d0       	rcall	.+90     	; 0x8e <main>
  34:	47 c0       	rjmp	.+142    	; 0xc4 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <__vector_1>:
#include<avr/io.h>
#include<util/delay.h>
#include<avr/interrupt.h>
ISR(INT0_vect)
{
  38:	1f 92       	push	r1
  3a:	0f 92       	push	r0
  3c:	0f b6       	in	r0, 0x3f	; 63
  3e:	0f 92       	push	r0
  40:	11 24       	eor	r1, r1
  42:	2f 93       	push	r18
  44:	3f 93       	push	r19
  46:	8f 93       	push	r24
  48:	9f 93       	push	r25
  4a:	ef 93       	push	r30
  4c:	ff 93       	push	r31
PORTC=0XFF;
  4e:	8f ef       	ldi	r24, 0xFF	; 255
  50:	85 bb       	out	0x15, r24	; 21
  52:	80 e1       	ldi	r24, 0x10	; 16
  54:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  56:	29 e1       	ldi	r18, 0x19	; 25
  58:	30 e0       	ldi	r19, 0x00	; 0
  5a:	f9 01       	movw	r30, r18
  5c:	31 97       	sbiw	r30, 0x01	; 1
  5e:	f1 f7       	brne	.-4      	; 0x5c <__SREG__+0x1d>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  60:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  62:	d9 f7       	brne	.-10     	; 0x5a <__SREG__+0x1b>
_delay_ms(1000);
PORTC=0x00;
  64:	15 ba       	out	0x15, r1	; 21
  66:	80 e1       	ldi	r24, 0x10	; 16
  68:	97 e2       	ldi	r25, 0x27	; 39
  6a:	29 e1       	ldi	r18, 0x19	; 25
  6c:	30 e0       	ldi	r19, 0x00	; 0
  6e:	f9 01       	movw	r30, r18
  70:	31 97       	sbiw	r30, 0x01	; 1
  72:	f1 f7       	brne	.-4      	; 0x70 <__SREG__+0x31>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  74:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  76:	d9 f7       	brne	.-10     	; 0x6e <__SREG__+0x2f>
_delay_ms(1000);

}
  78:	ff 91       	pop	r31
  7a:	ef 91       	pop	r30
  7c:	9f 91       	pop	r25
  7e:	8f 91       	pop	r24
  80:	3f 91       	pop	r19
  82:	2f 91       	pop	r18
  84:	0f 90       	pop	r0
  86:	0f be       	out	0x3f, r0	; 63
  88:	0f 90       	pop	r0
  8a:	1f 90       	pop	r1
  8c:	18 95       	reti

0000008e <main>:
void main()
{
DDRC=0XFF;
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	84 bb       	out	0x14, r24	; 20
DDRB=0xff;
  92:	87 bb       	out	0x17, r24	; 23
GICR=1<<INT0;
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	8b bf       	out	0x3b, r24	; 59
cli();
  98:	f8 94       	cli
sei();
  9a:	78 94       	sei
while(1)
{
PORTB=0XFF;
  9c:	4f ef       	ldi	r20, 0xFF	; 255
  9e:	29 e1       	ldi	r18, 0x19	; 25
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	48 bb       	out	0x18, r20	; 24
  a4:	80 e1       	ldi	r24, 0x10	; 16
  a6:	97 e2       	ldi	r25, 0x27	; 39
  a8:	f9 01       	movw	r30, r18
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b0:	d9 f7       	brne	.-10     	; 0xa8 <main+0x1a>
_delay_ms(1000);

PORTB=0X00;
  b2:	18 ba       	out	0x18, r1	; 24
  b4:	80 e1       	ldi	r24, 0x10	; 16
  b6:	97 e2       	ldi	r25, 0x27	; 39
  b8:	f9 01       	movw	r30, r18
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c0:	d9 f7       	brne	.-10     	; 0xb8 <main+0x2a>
  c2:	ef cf       	rjmp	.-34     	; 0xa2 <main+0x14>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
