
interrupt_7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000176  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000176  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006a  0080006a  00000214  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000184  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000012d  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001b3  00000000  00000000  00000515  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  000006c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000eb  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000018  00000000  00000000  000007e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000007fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	79 c0       	rjmp	.+242    	; 0xf6 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e7       	ldi	r30, 0x76	; 118
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ac 36       	cpi	r26, 0x6C	; 108
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	8b c0       	rjmp	.+278    	; 0x172 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
#include<util/delay.h>
#include<avr/interrupt.h>
#include<avr/interrupt.h>
volatile int i=0;
void main()
{int j;
  5e:	ff 92       	push	r15
  60:	0f 93       	push	r16
  62:	1f 93       	push	r17
  64:	df 93       	push	r29
  66:	cf 93       	push	r28
  68:	cd b7       	in	r28, 0x3d	; 61
  6a:	de b7       	in	r29, 0x3e	; 62
  6c:	2a 97       	sbiw	r28, 0x0a	; 10
  6e:	0f b6       	in	r0, 0x3f	; 63
  70:	f8 94       	cli
  72:	de bf       	out	0x3e, r29	; 62
  74:	0f be       	out	0x3f, r0	; 63
  76:	cd bf       	out	0x3d, r28	; 61
unsigned char a[10]={0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D , 0x7D, 0x07, 0x7F, 0x6F};
  78:	de 01       	movw	r26, r28
  7a:	11 96       	adiw	r26, 0x01	; 1
  7c:	e0 e6       	ldi	r30, 0x60	; 96
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	8a e0       	ldi	r24, 0x0A	; 10
  82:	01 90       	ld	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	81 50       	subi	r24, 0x01	; 1
  88:	e1 f7       	brne	.-8      	; 0x82 <main+0x24>

DDRB=0xff;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	87 bb       	out	0x17, r24	; 23
DDRC=0xff;
  8e:	84 bb       	out	0x14, r24	; 20
sei();
  90:	78 94       	sei
MCUCR=0x02;
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	85 bf       	out	0x35, r24	; 53

GICR=(1<<INT0);
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	8b bf       	out	0x3b, r24	; 59

while(1)
{
j=i%100;
PORTC=~0x01;
  9a:	8e ef       	ldi	r24, 0xFE	; 254
  9c:	f8 2e       	mov	r15, r24
PORTB=a[j/10];
  9e:	8e 01       	movw	r16, r28
  a0:	0f 5f       	subi	r16, 0xFF	; 255
  a2:	1f 4f       	sbci	r17, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a4:	2a ef       	ldi	r18, 0xFA	; 250
  a6:	30 e0       	ldi	r19, 0x00	; 0
_delay_ms(1);
PORTB=0x00;


PORTC=~0x02;
  a8:	4d ef       	ldi	r20, 0xFD	; 253

GICR=(1<<INT0);

while(1)
{
j=i%100;
  aa:	80 91 6a 00 	lds	r24, 0x006A
  ae:	90 91 6b 00 	lds	r25, 0x006B
PORTC=~0x01;
  b2:	f5 ba       	out	0x15, r15	; 21
PORTB=a[j/10];
  b4:	64 e6       	ldi	r22, 0x64	; 100
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	35 d0       	rcall	.+106    	; 0x124 <__divmodhi4>
  ba:	6a e0       	ldi	r22, 0x0A	; 10
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	32 d0       	rcall	.+100    	; 0x124 <__divmodhi4>
  c0:	fb 01       	movw	r30, r22
  c2:	e0 0f       	add	r30, r16
  c4:	f1 1f       	adc	r31, r17
  c6:	80 81       	ld	r24, Z
  c8:	88 bb       	out	0x18, r24	; 24
  ca:	c9 01       	movw	r24, r18
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x6e>
_delay_ms(1);
PORTB=0x00;
  d0:	18 ba       	out	0x18, r1	; 24


PORTC=~0x02;
  d2:	45 bb       	out	0x15, r20	; 21
PORTB=a[i%10];
  d4:	80 91 6a 00 	lds	r24, 0x006A
  d8:	90 91 6b 00 	lds	r25, 0x006B
  dc:	6a e0       	ldi	r22, 0x0A	; 10
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	21 d0       	rcall	.+66     	; 0x124 <__divmodhi4>
  e2:	f8 01       	movw	r30, r16
  e4:	e8 0f       	add	r30, r24
  e6:	f9 1f       	adc	r31, r25
  e8:	80 81       	ld	r24, Z
  ea:	88 bb       	out	0x18, r24	; 24
  ec:	c9 01       	movw	r24, r18
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x90>
_delay_ms(1);
PORTB=0x00;
  f2:	18 ba       	out	0x18, r1	; 24
  f4:	da cf       	rjmp	.-76     	; 0xaa <main+0x4c>

000000f6 <__vector_1>:


}
}
ISR (INT0_vect)
{
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25

++i;
 104:	80 91 6a 00 	lds	r24, 0x006A
 108:	90 91 6b 00 	lds	r25, 0x006B
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	90 93 6b 00 	sts	0x006B, r25
 112:	80 93 6a 00 	sts	0x006A, r24

}
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <__divmodhi4>:
 124:	97 fb       	bst	r25, 7
 126:	09 2e       	mov	r0, r25
 128:	07 26       	eor	r0, r23
 12a:	0a d0       	rcall	.+20     	; 0x140 <__divmodhi4_neg1>
 12c:	77 fd       	sbrc	r23, 7
 12e:	04 d0       	rcall	.+8      	; 0x138 <__divmodhi4_neg2>
 130:	0c d0       	rcall	.+24     	; 0x14a <__udivmodhi4>
 132:	06 d0       	rcall	.+12     	; 0x140 <__divmodhi4_neg1>
 134:	00 20       	and	r0, r0
 136:	1a f4       	brpl	.+6      	; 0x13e <__divmodhi4_exit>

00000138 <__divmodhi4_neg2>:
 138:	70 95       	com	r23
 13a:	61 95       	neg	r22
 13c:	7f 4f       	sbci	r23, 0xFF	; 255

0000013e <__divmodhi4_exit>:
 13e:	08 95       	ret

00000140 <__divmodhi4_neg1>:
 140:	f6 f7       	brtc	.-4      	; 0x13e <__divmodhi4_exit>
 142:	90 95       	com	r25
 144:	81 95       	neg	r24
 146:	9f 4f       	sbci	r25, 0xFF	; 255
 148:	08 95       	ret

0000014a <__udivmodhi4>:
 14a:	aa 1b       	sub	r26, r26
 14c:	bb 1b       	sub	r27, r27
 14e:	51 e1       	ldi	r21, 0x11	; 17
 150:	07 c0       	rjmp	.+14     	; 0x160 <__udivmodhi4_ep>

00000152 <__udivmodhi4_loop>:
 152:	aa 1f       	adc	r26, r26
 154:	bb 1f       	adc	r27, r27
 156:	a6 17       	cp	r26, r22
 158:	b7 07       	cpc	r27, r23
 15a:	10 f0       	brcs	.+4      	; 0x160 <__udivmodhi4_ep>
 15c:	a6 1b       	sub	r26, r22
 15e:	b7 0b       	sbc	r27, r23

00000160 <__udivmodhi4_ep>:
 160:	88 1f       	adc	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	5a 95       	dec	r21
 166:	a9 f7       	brne	.-22     	; 0x152 <__udivmodhi4_loop>
 168:	80 95       	com	r24
 16a:	90 95       	com	r25
 16c:	bc 01       	movw	r22, r24
 16e:	cd 01       	movw	r24, r26
 170:	08 95       	ret

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
