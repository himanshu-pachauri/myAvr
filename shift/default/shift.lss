
shift.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001f1  00000000  00000000  0000014b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f5  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001b6  00000000  00000000  00000431  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000005e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d1  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000100  00000000  00000000  000006d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000007d9  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec eb       	ldi	r30, 0xBC	; 188
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	2e c0       	rjmp	.+92     	; 0xb8 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__heap_end>

0000005e <main>:
#include<avr/io.h>
#include<util/delay.h>
void main()
	{
  5e:	8f ef       	ldi	r24, 0xFF	; 255
  60:	81 bb       	out	0x11, r24	; 17
  62:	21 e0       	ldi	r18, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  64:	49 e1       	ldi	r20, 0x19	; 25
  66:	50 e0       	ldi	r21, 0x00	; 0
  68:	01 c0       	rjmp	.+2      	; 0x6c <main+0xe>
DDRD=0xFF;
  6a:	21 e0       	ldi	r18, 0x01	; 1
unsigned char i=1;
while(1)
{

PORTD=i;
  6c:	22 bb       	out	0x12, r18	; 18
i=(i*2)|i;
  6e:	82 2f       	mov	r24, r18
  70:	88 0f       	add	r24, r24
  72:	28 2b       	or	r18, r24
  74:	88 e8       	ldi	r24, 0x88	; 136
  76:	93 e1       	ldi	r25, 0x13	; 19
  78:	fa 01       	movw	r30, r20
  7a:	31 97       	sbiw	r30, 0x01	; 1
  7c:	f1 f7       	brne	.-4      	; 0x7a <main+0x1c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  7e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  80:	d9 f7       	brne	.-10     	; 0x78 <main+0x1a>
_delay_ms(500);
PORTD=0x00;
  82:	12 ba       	out	0x12, r1	; 18
  84:	88 e8       	ldi	r24, 0x88	; 136
  86:	93 e1       	ldi	r25, 0x13	; 19
  88:	fa 01       	movw	r30, r20
  8a:	31 97       	sbiw	r30, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <main+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  8e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  90:	d9 f7       	brne	.-10     	; 0x88 <main+0x2a>
		_delay_ms(500);

if(i==0xff)
  92:	2f 3f       	cpi	r18, 0xFF	; 255
  94:	59 f7       	brne	.-42     	; 0x6c <main+0xe>
{
PORTD=0xff;
  96:	22 bb       	out	0x12, r18	; 18
  98:	88 e8       	ldi	r24, 0x88	; 136
  9a:	93 e1       	ldi	r25, 0x13	; 19
  9c:	fa 01       	movw	r30, r20
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a4:	d9 f7       	brne	.-10     	; 0x9c <main+0x3e>
_delay_ms(500);
PORTD=0x00;
  a6:	12 ba       	out	0x12, r1	; 18
  a8:	88 e8       	ldi	r24, 0x88	; 136
  aa:	93 e1       	ldi	r25, 0x13	; 19
  ac:	fa 01       	movw	r30, r20
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b4:	d9 f7       	brne	.-10     	; 0xac <main+0x4e>
  b6:	d9 cf       	rjmp	.-78     	; 0x6a <main+0xc>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
