
EEprom_coding.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001cc  00800060  000000d8  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000039  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000020f  00000000  00000000  00000371  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000017a  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000021b  00000000  00000000  000006fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000918  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f6  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000f6  00000000  00000000  00000a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	12 e0       	ldi	r17, 0x02	; 2
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 ed       	ldi	r30, 0xD8	; 216
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ac 32       	cpi	r26, 0x2C	; 44
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	13 d0       	rcall	.+38     	; 0x70 <main>
  4a:	44 c0       	rjmp	.+136    	; 0xd4 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <ewrite>:
void ewrite(unsigned char x,int y)
{while(EECR & (1<<EEWE));
  4e:	28 2f       	mov	r18, r24
  50:	e1 99       	sbic	0x1c, 1	; 28
  52:	fe cf       	rjmp	.-4      	; 0x50 <ewrite+0x2>

EEAR=y;
  54:	7f bb       	out	0x1f, r23	; 31
  56:	6e bb       	out	0x1e, r22	; 30
EEDR=x;
  58:	2d bb       	out	0x1d, r18	; 29
EECR|=(1<<EEMWE);
  5a:	e2 9a       	sbi	0x1c, 2	; 28
EECR|=(1<<EEWE);
  5c:	e1 9a       	sbi	0x1c, 1	; 28



}
  5e:	08 95       	ret

00000060 <eread>:
unsigned char eread(int y)
{while(EECR & (1<<EEWE));
  60:	9c 01       	movw	r18, r24
  62:	e1 99       	sbic	0x1c, 1	; 28
  64:	fe cf       	rjmp	.-4      	; 0x62 <eread+0x2>

EEAR=y;
  66:	3f bb       	out	0x1f, r19	; 31
  68:	2e bb       	out	0x1e, r18	; 30
EECR|=(1<<EERE);
  6a:	e0 9a       	sbi	0x1c, 0	; 28
return EEDR;
  6c:	8d b3       	in	r24, 0x1d	; 29

}
  6e:	08 95       	ret

00000070 <main>:
#include<avr/io.h>
#include<util/delay.h>
#include"font.h"
#include"eeprom8.h"
void main()
{int i;
  70:	cf 93       	push	r28
  72:	df 93       	push	r29
DDRD=0XFF;
  74:	8f ef       	ldi	r24, 0xFF	; 255
  76:	81 bb       	out	0x11, r24	; 17
  78:	c0 e0       	ldi	r28, 0x00	; 0
  7a:	d0 e0       	ldi	r29, 0x00	; 0
for(i=0;i<92;i++)
{ewrite(font[i],i);
  7c:	fe 01       	movw	r30, r28
  7e:	e0 5a       	subi	r30, 0xA0	; 160
  80:	ff 4f       	sbci	r31, 0xFF	; 255
  82:	80 81       	ld	r24, Z
  84:	be 01       	movw	r22, r28
  86:	e3 df       	rcall	.-58     	; 0x4e <ewrite>
#include"font.h"
#include"eeprom8.h"
void main()
{int i;
DDRD=0XFF;
for(i=0;i<92;i++)
  88:	21 96       	adiw	r28, 0x01	; 1
  8a:	cc 35       	cpi	r28, 0x5C	; 92
  8c:	d1 05       	cpc	r29, r1
  8e:	b1 f7       	brne	.-20     	; 0x7c <main+0xc>
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  94:	49 e1       	ldi	r20, 0x19	; 25
  96:	50 e0       	ldi	r21, 0x00	; 0



}
unsigned char eread(int y)
{while(EECR & (1<<EEWE));
  98:	e1 99       	sbic	0x1c, 1	; 28
  9a:	fe cf       	rjmp	.-4      	; 0x98 <main+0x28>

EEAR=y;
  9c:	3f bb       	out	0x1f, r19	; 31
  9e:	2e bb       	out	0x1e, r18	; 30
EECR|=(1<<EERE);
  a0:	e0 9a       	sbi	0x1c, 0	; 28
return EEDR;
  a2:	8d b3       	in	r24, 0x1d	; 29
{ewrite(font[i],i);
}
for(i=0;i<92;i++)
{PORTD=eread(i);
  a4:	82 bb       	out	0x12, r24	; 18
  a6:	80 e1       	ldi	r24, 0x10	; 16
  a8:	97 e2       	ldi	r25, 0x27	; 39
  aa:	fa 01       	movw	r30, r20
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x3c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b2:	d9 f7       	brne	.-10     	; 0xaa <main+0x3a>
_delay_ms(1000);
PORTD=00;
  b4:	12 ba       	out	0x12, r1	; 18
  b6:	80 e1       	ldi	r24, 0x10	; 16
  b8:	97 e2       	ldi	r25, 0x27	; 39
  ba:	fa 01       	movw	r30, r20
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c2:	d9 f7       	brne	.-10     	; 0xba <main+0x4a>
{int i;
DDRD=0XFF;
for(i=0;i<92;i++)
{ewrite(font[i],i);
}
for(i=0;i<92;i++)
  c4:	2f 5f       	subi	r18, 0xFF	; 255
  c6:	3f 4f       	sbci	r19, 0xFF	; 255
  c8:	2c 35       	cpi	r18, 0x5C	; 92
  ca:	31 05       	cpc	r19, r1
  cc:	29 f7       	brne	.-54     	; 0x98 <main+0x28>
PORTD=00;
_delay_ms(1000);

}

}
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
