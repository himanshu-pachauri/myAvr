
7seg_shifting_digit_usart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000106  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000152  00000000  00000000  000001bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000d7  00000000  00000000  00000311  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000019f  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  00000588  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000fc  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000018  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e0       	ldi	r30, 0x06	; 6
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	5b c0       	rjmp	.+182    	; 0x102 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:
#include<avr/io.h>
#include<util/delay.h>
void main()
{unsigned char a[10]={0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D , 0x7D, 0x07, 0x7F, 0x6F};
  4e:	ef 92       	push	r14
  50:	ff 92       	push	r15
  52:	0f 93       	push	r16
  54:	1f 93       	push	r17
  56:	df 93       	push	r29
  58:	cf 93       	push	r28
  5a:	cd b7       	in	r28, 0x3d	; 61
  5c:	de b7       	in	r29, 0x3e	; 62
  5e:	2e 97       	sbiw	r28, 0x0e	; 14
  60:	0f b6       	in	r0, 0x3f	; 63
  62:	f8 94       	cli
  64:	de bf       	out	0x3e, r29	; 62
  66:	0f be       	out	0x3f, r0	; 63
  68:	cd bf       	out	0x3d, r28	; 61
  6a:	de 01       	movw	r26, r28
  6c:	15 96       	adiw	r26, 0x05	; 5
  6e:	e0 e6       	ldi	r30, 0x60	; 96
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	8a e0       	ldi	r24, 0x0A	; 10
  74:	01 90       	ld	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	81 50       	subi	r24, 0x01	; 1
  7a:	e1 f7       	brne	.-8      	; 0x74 <main+0x26>
 unsigned char b[]={2,3,4,5};
  7c:	82 e0       	ldi	r24, 0x02	; 2
  7e:	89 83       	std	Y+1, r24	; 0x01
  80:	83 e0       	ldi	r24, 0x03	; 3
  82:	8a 83       	std	Y+2, r24	; 0x02
  84:	84 e0       	ldi	r24, 0x04	; 4
  86:	8b 83       	std	Y+3, r24	; 0x03
  88:	85 e0       	ldi	r24, 0x05	; 5
  8a:	8c 83       	std	Y+4, r24	; 0x04
 int i=0,j,k=0;
	DDRB=0XFF;
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	87 bb       	out	0x17, r24	; 23
	DDRC=0XFF;
  90:	84 bb       	out	0x14, r24	; 20
	DDRD=0XFE;
  92:	8e ef       	ldi	r24, 0xFE	; 254
  94:	81 bb       	out	0x11, r24	; 17
//UCSRA=(1<<U2X);
UCSRB=(1<<RXEN)|(1<<RXCIE);
  96:	80 e9       	ldi	r24, 0x90	; 144
  98:	8a b9       	out	0x0a, r24	; 10
UCSRC|=(1<<URSEL);
  9a:	80 b5       	in	r24, 0x20	; 32
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	80 bd       	out	0x20, r24	; 32
UBRRH=0X00;
  a0:	10 bc       	out	0x20, r1	; 32
UBRRL=0X06;
  a2:	86 e0       	ldi	r24, 0x06	; 6
  a4:	89 b9       	out	0x09, r24	; 9
  a6:	23 e0       	ldi	r18, 0x03	; 3
  a8:	30 e0       	ldi	r19, 0x00	; 0


for(i=3;i>=0;i--)
{
//for(k=0;k<500;k++)
{PORTC=~(0X08>>i);
  aa:	88 e0       	ldi	r24, 0x08	; 8
  ac:	e8 2e       	mov	r14, r24
  ae:	f1 2c       	mov	r15, r1
PORTB=a[b[i]];
  b0:	8e 01       	movw	r16, r28
  b2:	0f 5f       	subi	r16, 0xFF	; 255
  b4:	1f 4f       	sbci	r17, 0xFF	; 255
  b6:	be 01       	movw	r22, r28
  b8:	6b 5f       	subi	r22, 0xFB	; 251
  ba:	7f 4f       	sbci	r23, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  bc:	44 ef       	ldi	r20, 0xF4	; 244
  be:	51 e0       	ldi	r21, 0x01	; 1


for(i=3;i>=0;i--)
{
//for(k=0;k<500;k++)
{PORTC=~(0X08>>i);
  c0:	c7 01       	movw	r24, r14
  c2:	02 2e       	mov	r0, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <main+0x7c>
  c6:	95 95       	asr	r25
  c8:	87 95       	ror	r24
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <main+0x78>
  ce:	80 95       	com	r24
  d0:	85 bb       	out	0x15, r24	; 21
PORTB=a[b[i]];
  d2:	d8 01       	movw	r26, r16
  d4:	a2 0f       	add	r26, r18
  d6:	b3 1f       	adc	r27, r19
  d8:	8c 91       	ld	r24, X
  da:	fb 01       	movw	r30, r22
  dc:	e8 0f       	add	r30, r24
  de:	f1 1d       	adc	r31, r1
  e0:	80 81       	ld	r24, Z
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	ca 01       	movw	r24, r20
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x98>
_delay_ms(2);
while((UCSRA&(1<<RXC))==1);
  ea:	8b b1       	in	r24, 0x0b	; 11
{//PORTB=a[0];
//_delay_ms(10000);
b[i]=UDR-48;
  ec:	8c b1       	in	r24, 0x0c	; 12
  ee:	80 53       	subi	r24, 0x30	; 48
  f0:	8c 93       	st	X, r24
UCSRA|=(1<<RXC);
  f2:	5f 9a       	sbi	0x0b, 7	; 11

 while(1)
{	


for(i=3;i>=0;i--)
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	30 40       	sbci	r19, 0x00	; 0
  f8:	37 ff       	sbrs	r19, 7
  fa:	e2 cf       	rjmp	.-60     	; 0xc0 <main+0x72>
  fc:	23 e0       	ldi	r18, 0x03	; 3
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	df cf       	rjmp	.-66     	; 0xc0 <main+0x72>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
