
lcd_tesing2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000020c  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000040  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000029e  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000012a  00000000  00000000  00000582  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002a8  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000954  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e9  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000130  00000000  00000000  00000a9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e0       	ldi	r30, 0x0C	; 12
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a4 36       	cpi	r26, 0x64	; 100
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	aa d0       	rcall	.+340    	; 0x19e <main>
  4a:	de c0       	rjmp	.+444    	; 0x208 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <ldata>:


}
void ldata(unsigned char x)//rs=1,rw=0,en=1,,,,,en =0
{
lcd=0xf0&x;//send higher
  4e:	28 2f       	mov	r18, r24
  50:	20 7f       	andi	r18, 0xF0	; 240
  52:	22 bb       	out	0x12, r18	; 18
lcd|=(1<<rs);//rs=1
  54:	90 9a       	sbi	0x12, 0	; 18
lcd&=~(1<<rw);//rw=0
  56:	91 98       	cbi	0x12, 1	; 18
lcd|=(1<<en);//en=1
  58:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  5a:	2a ef       	ldi	r18, 0xFA	; 250
  5c:	30 e0       	ldi	r19, 0x00	; 0
  5e:	f9 01       	movw	r30, r18
  60:	31 97       	sbiw	r30, 0x01	; 1
  62:	f1 f7       	brne	.-4      	; 0x60 <ldata+0x12>
_delay_ms(1);
lcd&=~(1<<en);//en=0;
  64:	92 98       	cbi	0x12, 2	; 18


lcd=(0x0f&x)<<4;//send lower
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	44 e0       	ldi	r20, 0x04	; 4
  6a:	88 0f       	add	r24, r24
  6c:	99 1f       	adc	r25, r25
  6e:	4a 95       	dec	r20
  70:	e1 f7       	brne	.-8      	; 0x6a <ldata+0x1c>
  72:	82 bb       	out	0x12, r24	; 18
lcd|=(1<<rs);//rs =1
  74:	90 9a       	sbi	0x12, 0	; 18
lcd&=~(1<<rw);//rw=0
  76:	91 98       	cbi	0x12, 1	; 18
lcd|=(1<<en);//en=1
  78:	92 9a       	sbi	0x12, 2	; 18
  7a:	c9 01       	movw	r24, r18
  7c:	01 97       	sbiw	r24, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <ldata+0x2e>
_delay_ms(1);
lcd&=~(1<<en);//en=0;
  80:	92 98       	cbi	0x12, 2	; 18
}
  82:	08 95       	ret

00000084 <lcmd>:
void lcmd(unsigned char x)
{
lcd=0xf0&x;
  84:	28 2f       	mov	r18, r24
  86:	20 7f       	andi	r18, 0xF0	; 240
  88:	22 bb       	out	0x12, r18	; 18
lcd&=~(1<<rs);//rs=0
  8a:	90 98       	cbi	0x12, 0	; 18
lcd&=~(1<<rw);//rw=0
  8c:	91 98       	cbi	0x12, 1	; 18
lcd|=(1<<en);//en=1
  8e:	92 9a       	sbi	0x12, 2	; 18
  90:	2a ef       	ldi	r18, 0xFA	; 250
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	f9 01       	movw	r30, r18
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <lcmd+0x12>
_delay_ms(1);
lcd&=~(1<<en);//en=0
  9a:	92 98       	cbi	0x12, 2	; 18



lcd=((0x0f&x)<<4);
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	54 e0       	ldi	r21, 0x04	; 4
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	5a 95       	dec	r21
  a6:	e1 f7       	brne	.-8      	; 0xa0 <lcmd+0x1c>
  a8:	82 bb       	out	0x12, r24	; 18
lcd&=~(1<<rs);//rs=0
  aa:	90 98       	cbi	0x12, 0	; 18
lcd&=~(1<<rw);//rw=0
  ac:	91 98       	cbi	0x12, 1	; 18
lcd|=(1<<en);//en=1
  ae:	92 9a       	sbi	0x12, 2	; 18
  b0:	c9 01       	movw	r24, r18
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <lcmd+0x2e>
_delay_ms(1);
lcd&=~(1<<en);//en=0;
  b6:	92 98       	cbi	0x12, 2	; 18
}
  b8:	08 95       	ret

000000ba <lstr>:
void lstr(unsigned char *p)
{
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	ec 01       	movw	r28, r24
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <lstr+0xc>
while(*p)
{
ldata(*p);
  c2:	c5 df       	rcall	.-118    	; 0x4e <ldata>
p++;
  c4:	21 96       	adiw	r28, 0x01	; 1
_delay_ms(1);
lcd&=~(1<<en);//en=0;
}
void lstr(unsigned char *p)
{
while(*p)
  c6:	88 81       	ld	r24, Y
  c8:	88 23       	and	r24, r24
  ca:	d9 f7       	brne	.-10     	; 0xc2 <lstr+0x8>
{
ldata(*p);
p++;
}
}
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <lint>:
void lint(unsigned long x)
{unsigned long y=x;
  d2:	cf 92       	push	r12
  d4:	df 92       	push	r13
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	df 93       	push	r29
  e0:	cf 93       	push	r28
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	2a 97       	sbiw	r28, 0x0a	; 10
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	f8 94       	cli
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	7b 01       	movw	r14, r22
  f4:	8c 01       	movw	r16, r24
  f6:	cc 24       	eor	r12, r12
  f8:	dd 24       	eor	r13, r13
  fa:	0c c0       	rjmp	.+24     	; 0x114 <lint+0x42>
unsigned char a[10];
int i=0;
while(y>0)
{y=y/10;
  fc:	2a e0       	ldi	r18, 0x0A	; 10
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	5f d0       	rcall	.+190    	; 0x1c4 <__udivmodsi4>
 106:	c9 01       	movw	r24, r18
 108:	da 01       	movw	r26, r20
 10a:	bc 01       	movw	r22, r24
 10c:	cd 01       	movw	r24, r26
i++;
 10e:	08 94       	sec
 110:	c1 1c       	adc	r12, r1
 112:	d1 1c       	adc	r13, r1
}
void lint(unsigned long x)
{unsigned long y=x;
unsigned char a[10];
int i=0;
while(y>0)
 114:	61 15       	cp	r22, r1
 116:	71 05       	cpc	r23, r1
 118:	81 05       	cpc	r24, r1
 11a:	91 05       	cpc	r25, r1
 11c:	79 f7       	brne	.-34     	; 0xfc <lint+0x2a>
{y=y/10;
i++;
}
a[i--]=0;
 11e:	ce 01       	movw	r24, r28
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	fc 01       	movw	r30, r24
 124:	ec 0d       	add	r30, r12
 126:	fd 1d       	adc	r31, r13
 128:	10 82       	st	Z, r1
 12a:	08 94       	sec
 12c:	c1 08       	sbc	r12, r1
 12e:	d1 08       	sbc	r13, r1
 130:	c8 0e       	add	r12, r24
 132:	d9 1e       	adc	r13, r25
 134:	18 c0       	rjmp	.+48     	; 0x166 <lint+0x94>
while(x>0)
{
a[i--]=((x%10)+48);
 136:	c8 01       	movw	r24, r16
 138:	b7 01       	movw	r22, r14
 13a:	2a e0       	ldi	r18, 0x0A	; 10
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	40 d0       	rcall	.+128    	; 0x1c4 <__udivmodsi4>
 144:	60 5d       	subi	r22, 0xD0	; 208
 146:	f6 01       	movw	r30, r12
 148:	60 83       	st	Z, r22
x=x/10;
 14a:	c8 01       	movw	r24, r16
 14c:	b7 01       	movw	r22, r14
 14e:	2a e0       	ldi	r18, 0x0A	; 10
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	40 e0       	ldi	r20, 0x00	; 0
 154:	50 e0       	ldi	r21, 0x00	; 0
 156:	36 d0       	rcall	.+108    	; 0x1c4 <__udivmodsi4>
 158:	c9 01       	movw	r24, r18
 15a:	da 01       	movw	r26, r20
 15c:	7c 01       	movw	r14, r24
 15e:	8d 01       	movw	r16, r26
 160:	08 94       	sec
 162:	c1 08       	sbc	r12, r1
 164:	d1 08       	sbc	r13, r1
while(y>0)
{y=y/10;
i++;
}
a[i--]=0;
while(x>0)
 166:	e1 14       	cp	r14, r1
 168:	f1 04       	cpc	r15, r1
 16a:	01 05       	cpc	r16, r1
 16c:	11 05       	cpc	r17, r1
 16e:	19 f7       	brne	.-58     	; 0x136 <lint+0x64>
{
a[i--]=((x%10)+48);
x=x/10;
}
lint(a);
 170:	be 01       	movw	r22, r28
 172:	6f 5f       	subi	r22, 0xFF	; 255
 174:	7f 4f       	sbci	r23, 0xFF	; 255
 176:	88 27       	eor	r24, r24
 178:	77 fd       	sbrc	r23, 7
 17a:	80 95       	com	r24
 17c:	98 2f       	mov	r25, r24
 17e:	a9 df       	rcall	.-174    	; 0xd2 <lint>

}
 180:	2a 96       	adiw	r28, 0x0a	; 10
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	de bf       	out	0x3e, r29	; 62
 188:	0f be       	out	0x3f, r0	; 63
 18a:	cd bf       	out	0x3d, r28	; 61
 18c:	cf 91       	pop	r28
 18e:	df 91       	pop	r29
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	ff 90       	pop	r15
 196:	ef 90       	pop	r14
 198:	df 90       	pop	r13
 19a:	cf 90       	pop	r12
 19c:	08 95       	ret

0000019e <main>:
void ldata(unsigned char x);
void lcmd(unsigned char x);
void lstr(unsigned char*);
void main()
{unsigned char a[5];
DDRD=0xff;
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	81 bb       	out	0x11, r24	; 17
lcmd(0x02);
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	6f df       	rcall	.-290    	; 0x84 <lcmd>
lcmd(0x28);
 1a6:	88 e2       	ldi	r24, 0x28	; 40
 1a8:	6d df       	rcall	.-294    	; 0x84 <lcmd>
lcmd(0x06);
 1aa:	86 e0       	ldi	r24, 0x06	; 6
 1ac:	6b df       	rcall	.-298    	; 0x84 <lcmd>
lcmd(0x0c);
 1ae:	8c e0       	ldi	r24, 0x0C	; 12
 1b0:	69 df       	rcall	.-302    	; 0x84 <lcmd>
lstr("ok");
 1b2:	80 e6       	ldi	r24, 0x60	; 96
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	81 df       	rcall	.-254    	; 0xba <lstr>
lint(32767);
 1b8:	6f ef       	ldi	r22, 0xFF	; 255
 1ba:	7f e7       	ldi	r23, 0x7F	; 127
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	88 df       	rcall	.-240    	; 0xd2 <lint>



}
 1c2:	08 95       	ret

000001c4 <__udivmodsi4>:
 1c4:	a1 e2       	ldi	r26, 0x21	; 33
 1c6:	1a 2e       	mov	r1, r26
 1c8:	aa 1b       	sub	r26, r26
 1ca:	bb 1b       	sub	r27, r27
 1cc:	fd 01       	movw	r30, r26
 1ce:	0d c0       	rjmp	.+26     	; 0x1ea <__udivmodsi4_ep>

000001d0 <__udivmodsi4_loop>:
 1d0:	aa 1f       	adc	r26, r26
 1d2:	bb 1f       	adc	r27, r27
 1d4:	ee 1f       	adc	r30, r30
 1d6:	ff 1f       	adc	r31, r31
 1d8:	a2 17       	cp	r26, r18
 1da:	b3 07       	cpc	r27, r19
 1dc:	e4 07       	cpc	r30, r20
 1de:	f5 07       	cpc	r31, r21
 1e0:	20 f0       	brcs	.+8      	; 0x1ea <__udivmodsi4_ep>
 1e2:	a2 1b       	sub	r26, r18
 1e4:	b3 0b       	sbc	r27, r19
 1e6:	e4 0b       	sbc	r30, r20
 1e8:	f5 0b       	sbc	r31, r21

000001ea <__udivmodsi4_ep>:
 1ea:	66 1f       	adc	r22, r22
 1ec:	77 1f       	adc	r23, r23
 1ee:	88 1f       	adc	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	1a 94       	dec	r1
 1f4:	69 f7       	brne	.-38     	; 0x1d0 <__udivmodsi4_loop>
 1f6:	60 95       	com	r22
 1f8:	70 95       	com	r23
 1fa:	80 95       	com	r24
 1fc:	90 95       	com	r25
 1fe:	9b 01       	movw	r18, r22
 200:	ac 01       	movw	r20, r24
 202:	bd 01       	movw	r22, r26
 204:	cf 01       	movw	r24, r30
 206:	08 95       	ret

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
