
serial_communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000ca  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000142  00000000  00000000  00000183  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000de  00000000  00000000  000002c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000175  00000000  00000000  000003a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  00000518  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f2  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000040  00000000  00000000  0000062a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea ec       	ldi	r30, 0xCA	; 202
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	3d c0       	rjmp	.+122    	; 0xc6 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:
/*TTTTTTTTTTTTransmitter*/

#include<avr/io.h>
#include<util/delay.h>
void main()
{
  4e:	df 93       	push	r29
  50:	cf 93       	push	r28
  52:	cd b7       	in	r28, 0x3d	; 61
  54:	de b7       	in	r29, 0x3e	; 62
  56:	2a 97       	sbiw	r28, 0x0a	; 10
  58:	0f b6       	in	r0, 0x3f	; 63
  5a:	f8 94       	cli
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	0f be       	out	0x3f, r0	; 63
  60:	cd bf       	out	0x3d, r28	; 61
unsigned char a[10]="HIMANSHU",i=0;
  62:	de 01       	movw	r26, r28
  64:	11 96       	adiw	r26, 0x01	; 1
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	89 e0       	ldi	r24, 0x09	; 9
  6c:	01 90       	ld	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	81 50       	subi	r24, 0x01	; 1
  72:	e1 f7       	brne	.-8      	; 0x6c <main+0x1e>
  74:	1a 86       	std	Y+10, r1	; 0x0a
  76:	80 e1       	ldi	r24, 0x10	; 16
  78:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7a:	29 e1       	ldi	r18, 0x19	; 25
  7c:	30 e0       	ldi	r19, 0x00	; 0
  7e:	f9 01       	movw	r30, r18
  80:	31 97       	sbiw	r30, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <main+0x32>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  84:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  86:	d9 f7       	brne	.-10     	; 0x7e <main+0x30>
_delay_ms(1000);
UCSRB=(1<<TXEN);
  88:	88 e0       	ldi	r24, 0x08	; 8
  8a:	8a b9       	out	0x0a, r24	; 10
UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  8c:	86 e8       	ldi	r24, 0x86	; 134
  8e:	80 bd       	out	0x20, r24	; 32
UBRRL=51;//9600 BAUD RATE
  90:	83 e3       	ldi	r24, 0x33	; 51
  92:	89 b9       	out	0x09, r24	; 9
  94:	80 e0       	ldi	r24, 0x00	; 0
while(a[i]!=0)
  96:	9e 01       	movw	r18, r28
  98:	2f 5f       	subi	r18, 0xFF	; 255
  9a:	3f 4f       	sbci	r19, 0xFF	; 255
{UDR=a[i];
while(UCSRA&(1<<TXC)==0);
UCSRA=(1<<TXC);
  9c:	90 e4       	ldi	r25, 0x40	; 64
  9e:	04 c0       	rjmp	.+8      	; 0xa8 <main+0x5a>
_delay_ms(1000);
UCSRB=(1<<TXEN);
UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
UBRRL=51;//9600 BAUD RATE
while(a[i]!=0)
{UDR=a[i];
  a0:	ec b9       	out	0x0c, r30	; 12
while(UCSRA&(1<<TXC)==0);
  a2:	4b b1       	in	r20, 0x0b	; 11
UCSRA=(1<<TXC);
  a4:	9b b9       	out	0x0b, r25	; 11
i++;
  a6:	8f 5f       	subi	r24, 0xFF	; 255
unsigned char a[10]="HIMANSHU",i=0;
_delay_ms(1000);
UCSRB=(1<<TXEN);
UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
UBRRL=51;//9600 BAUD RATE
while(a[i]!=0)
  a8:	f9 01       	movw	r30, r18
  aa:	e8 0f       	add	r30, r24
  ac:	f1 1d       	adc	r31, r1
  ae:	e0 81       	ld	r30, Z
  b0:	ee 23       	and	r30, r30
  b2:	b1 f7       	brne	.-20     	; 0xa0 <main+0x52>
{UDR=a[i];
while(UCSRA&(1<<TXC)==0);
UCSRA=(1<<TXC);
i++;
}
}
  b4:	2a 96       	adiw	r28, 0x0a	; 10
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	f8 94       	cli
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	0f be       	out	0x3f, r0	; 63
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	cf 91       	pop	r28
  c2:	df 91       	pop	r29
  c4:	08 95       	ret

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
