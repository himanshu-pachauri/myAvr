
graphical_Lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001ae  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e1  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001b1  00000000  00000000  000003c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f1  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000003e  00000000  00000000  000006a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	1f d0       	rcall	.+62     	; 0x72 <main>
  34:	2a c0       	rjmp	.+84     	; 0x8a <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <gldata>:



}
void gldata(unsigned char x)
{PORTD=x;
  38:	82 bb       	out	0x12, r24	; 18
PORTB=0x15;
  3a:	85 e1       	ldi	r24, 0x15	; 21
  3c:	88 bb       	out	0x18, r24	; 24
  3e:	80 e1       	ldi	r24, 0x10	; 16
  40:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  42:	29 e1       	ldi	r18, 0x19	; 25
  44:	30 e0       	ldi	r19, 0x00	; 0
  46:	f9 01       	movw	r30, r18
  48:	31 97       	sbiw	r30, 0x01	; 1
  4a:	f1 f7       	brne	.-4      	; 0x48 <__SREG__+0x9>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  4c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  4e:	d9 f7       	brne	.-10     	; 0x46 <__SREG__+0x7>
_delay_ms(1000);
PORTB&=0xfe;
  50:	c0 98       	cbi	0x18, 0	; 24


}
  52:	08 95       	ret

00000054 <glcmd>:
void glcmd(unsigned char x)
{PORTD=x;
  54:	82 bb       	out	0x12, r24	; 18
PORTB=0x19;
  56:	89 e1       	ldi	r24, 0x19	; 25
  58:	88 bb       	out	0x18, r24	; 24
  5a:	80 e1       	ldi	r24, 0x10	; 16
  5c:	97 e2       	ldi	r25, 0x27	; 39
  5e:	29 e1       	ldi	r18, 0x19	; 25
  60:	30 e0       	ldi	r19, 0x00	; 0
  62:	f9 01       	movw	r30, r18
  64:	31 97       	sbiw	r30, 0x01	; 1
  66:	f1 f7       	brne	.-4      	; 0x64 <glcmd+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  68:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  6a:	d9 f7       	brne	.-10     	; 0x62 <glcmd+0xe>
_delay_ms(1000);
PORTB&=0;
  6c:	88 b3       	in	r24, 0x18	; 24
  6e:	18 ba       	out	0x18, r1	; 24
}
  70:	08 95       	ret

00000072 <main>:
void glcmd(unsigned char);
void gldata(unsigned char);
void gcas(unsigned char,unsigned char);
void main()
{
DDRB=0xff;
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	87 bb       	out	0x17, r24	; 23
DDRD=0XFF;
  76:	81 bb       	out	0x11, r24	; 17
glcmd(0x3f);
  78:	8f e3       	ldi	r24, 0x3F	; 63
  7a:	ec df       	rcall	.-40     	; 0x54 <glcmd>
glcmd(0xBB);
  7c:	8b eb       	ldi	r24, 0xBB	; 187
  7e:	ea df       	rcall	.-44     	; 0x54 <glcmd>
glcmd(0x40);
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	e8 df       	rcall	.-48     	; 0x54 <glcmd>
gldata(0xff);
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	d8 df       	rcall	.-80     	; 0x38 <gldata>
  88:	ff cf       	rjmp	.-2      	; 0x88 <main+0x16>

0000008a <_exit>:
  8a:	f8 94       	cli

0000008c <__stop_program>:
  8c:	ff cf       	rjmp	.-2      	; 0x8c <__stop_program>
